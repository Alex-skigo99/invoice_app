openapi: 3.0.0
info:
  title: API Documentation
  version: 1.0.0
  description: API documentation for my Express app
paths:
  /api/invoices:
    get:
      summary: Get all invoices from the database. Filter by query parameters.
      parameters:
        - in: query
          name: status
          schema:
            $ref: '#/components/schemas/Status'
          description: Filter by status (draft, pending, paid)
          nullable: true
          example: draft
        - in: query
          name: page
          schema:
            type: integer
          description: Page number
          nullable: true
          default: 0
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
          description: Number of items per page
          nullable: true
          default: 10
          example: 2
      tags:
        - Invoices
      responses:
        '200':
          description: Success
    post:
      summary: Create a new invoice in the database.
      tags:
        - Invoices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest'
  /api/invoices/{dbId}:
    patch:
      summary: Update an existing invoice in the database.
      tags:
        - Invoices
      parameters:
        - in: path
          name: dbId
          required: true
          schema:
            type: string
          description: The database ID of the invoice
          example: xxxxxx
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
      responses:
        '200':
          description: Success
        '400':
          description: Bad Request
          $ref: '#/components/responses/BadRequest'
        '404':
          description: Invoice not found
          $ref: '#/components/responses/BadRequest'
        '422':
          description: Validation error
          $ref: '#/components/responses/BadRequest'
    delete:
      summary: Delete an invoice from the database.
      tags:
        - Invoices
      parameters:
        - in: path
          name: dbId
          required: true
          schema:
            type: string
          description: The database ID of the invoice
          example: xxxxxxxxxxxxxxxxxxx
      responses:
        '200':
          description: Success
        '404':
          description: Invoice not found
          $ref: '#/components/responses/BadRequest'
  /api/hello:
    get:
      summary: Check connection to the database.
      tags:
        - Hello
      responses:
        '200':
          description: Success
components:
  schemas:
    Invoice:
      type: object
      required:
        - createdAt
        - paymentDue
        - description
        - paymentTerms
        - clientName
        - status
        - senderAddress
        - clientAddress
        - items
      properties:
        createdAt:
          type: string
          format: date-time
          example: '2021-11-05T00:00:00.000Z'
        paymentDue:
          type: string
          format: date-time
          example: '2021-11-12T00:00:00.000Z'
        description:
          type: string
          example: Logo Re-design
        paymentTerms:
          type: integer
          example: 7
        clientName:
          type: string
          example: Anita Wainwright
        clientEmail:
          type: string
          example: ''
        status:
          type: string
          example: draft
        senderAddress:
          type: object
          properties:
            street:
              type: string
              example: 19 Union Terrace
            city:
              type: string
              example: London
            postCode:
              type: string
              example: E1 3EZ
            country:
              type: string
              example: United Kingdom
        clientAddress:
          type: object
          properties:
            street:
              type: string
              example: ''
            city:
              type: string
              example: ''
            postCode:
              type: string
              example: ''
            country:
              type: string
              example: ''
        items:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: Logo Re-design
              quantity:
                type: integer
                example: 1
              price:
                type: number
                format: double
                example: 3102.04
              total:
                type: number
                format: double
                example: 3102.04
    Status:
      type: string
      enum:
        - draft
        - pending
        - paid
  responses:
    BadRequest:
      description: Bad Request due to invalid input or parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              title:
                type: string
                description: A short description of the error.
              detail:
                type: string
                description: A detail information about error.
              errors:
                type: array
                description: Additional details about the error (optional).
                items:
                  type: object
                  properties:
                    message:
                      type: string
                      description: A more detailed error message for the field.
            required:
              - title
              - detail
tags: []
